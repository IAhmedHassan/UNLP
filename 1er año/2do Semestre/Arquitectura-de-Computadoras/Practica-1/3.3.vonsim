;Reimplementar los programas del Ejercicio 1 - Parte 1, pero ahora implementando las siguientes subrutinas. En todos los casos, recibir los valores por par√°metros pasados por registro, y devolver el resultado tambi√©n por valor y por registro.
;1. üìÑ CONTAR_CAR ‚≠ê Recibe la direcci√≥n de comienzo de un string en BX, su longitud en AL, y el car√°cter a contar en AH. Retorna en CL la cantidad de veces que aparece el car√°cter.
;2. üìÑ ES_MAYUS ‚≠ê Recibe un car√°cter en el registro AL y retorna en AH el valor 0FFh si es may√∫scula y 0 de lo contrario.
;3. üìÑ A_MINUS ‚≠ê Recibe un car√°cter may√∫scula en AL y lo devuelve como min√∫scula.
;4. üìÑ STRING_A_MINUS ‚≠ê‚≠ê Recibe la direcci√≥n de comienzo de un string en BX, su longitud enAL. Recorre el string, cambiando a min√∫scula las letras que sean may√∫sculas. No retorna nada, sino que modifica el string directamente en la memoria.

org 1000h
cant db ?
boolean db ?
cadena db "Esto es una cadena"
fin_cadena db ?

org 3000h
CONTAR_CAR:
;Recibe:
;  BX: dir cadena en BX
;  AL: long de cadena
;  AH: caracter a contar
;Devuelve:
;  CL: cantidad de veces que aparece
  mov cl, 0
  compare:
  cmp ah, [bx]
  jnz CC_sigue
  inc cl
  CC_sigue:
  inc bx
  dec al
  jz fin
  jmp compare
  fin:
ret

ES_MAYUS:
;Recibe:
;  AL: caracter por valor
;Devuelve:
;  AH: 0FFh si es may√∫scula, o 0 si no
  cmp AL, 'A'
  js no
  cmp AL, 'Z' +1
  jns no
  mov ah, 0ffh
ret
  no:
  mov ah, 0
ret

A_MINUS:
;Recibe:
;  AL: caracter en may√∫scula
;Devuelve:
;  AL: caracter en minuscula
  push bx
  mov bx, al
  add al, 20h
  
ret

STRING_A_MINUS:
;Recibe:
;  BX: Dir inicio de string
;  AL: Longitud string
  mov al, [bx]
  call ES_MAYUS
  SAM_compare:
  cmp ah, 0FFh
  jnz SAM_sigue
  ;TODO
  
  



org 2000h
mov bx, offset cadena
mov al, offset fin_cadena - offset cadena
mov ah, 'e'
call CONTAR_CAR
mov cant, cl
mov al, cadena
call ES_MAYUS
mov boolean, ah
call A_MINUS
int 0
end
